// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes(in *jlexer.Lexer, out *MultiManifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TotalChunks":
			out.TotalChunks = int(in.Int())
		case "Digest":
			out.Digest = string(in.String())
		case "Size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes(out *jwriter.Writer, in MultiManifest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TotalChunks\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalChunks))
	}
	{
		const prefix string = ",\"Digest\":"
		out.RawString(prefix)
		out.String(string(in.Digest))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiManifest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiManifest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiManifest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiManifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes1(in *jlexer.Lexer, out *ManifestV2File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		case "ModifyTime":
			out.ModifyTime = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes1(out *jwriter.Writer, in ManifestV2File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"ModifyTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ModifyTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV2File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV2File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV2File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV2File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes1(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes2(in *jlexer.Lexer, out *ManifestV2Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Dir":
			out.Dir = string(in.String())
		case "Files":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Files = make(map[string]ManifestV2File)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 ManifestV2File
					(v1).UnmarshalEasyJSON(in)
					(out.Files)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes2(out *jwriter.Writer, in ManifestV2Content) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Dir\":"
		out.RawString(prefix[1:])
		out.String(string(in.Dir))
	}
	{
		const prefix string = ",\"Files\":"
		out.RawString(prefix)
		if in.Files == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Files {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				(v2Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV2Content) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV2Content) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV2Content) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV2Content) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes2(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes3(in *jlexer.Lexer, out *ManifestV2Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MediaType":
			out.MediaType = string(in.String())
		case "Size":
			out.Size = int(in.Int())
		case "Digest":
			out.Digest = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes3(out *jwriter.Writer, in ManifestV2Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MediaType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MediaType))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"Digest\":"
		out.RawString(prefix)
		out.String(string(in.Digest))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV2Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV2Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV2Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV2Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes3(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes4(in *jlexer.Lexer, out *ManifestV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SchemaVersion":
			out.SchemaVersion = int(in.Int())
		case "Config":
			(out.Config).UnmarshalEasyJSON(in)
		case "Layers":
			if in.IsNull() {
				in.Skip()
				out.Layers = nil
			} else {
				in.Delim('[')
				if out.Layers == nil {
					if !in.IsDelim(']') {
						out.Layers = make([]ManifestV2Config, 0, 1)
					} else {
						out.Layers = []ManifestV2Config{}
					}
				} else {
					out.Layers = (out.Layers)[:0]
				}
				for !in.IsDelim(']') {
					var v3 ManifestV2Config
					(v3).UnmarshalEasyJSON(in)
					out.Layers = append(out.Layers, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes4(out *jwriter.Writer, in ManifestV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SchemaVersion\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SchemaVersion))
	}
	{
		const prefix string = ",\"Config\":"
		out.RawString(prefix)
		(in.Config).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Layers\":"
		out.RawString(prefix)
		if in.Layers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Layers {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes4(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes5(in *jlexer.Lexer, out *ManifestV1Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BlobSum":
			out.BlobSum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes5(out *jwriter.Writer, in ManifestV1Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BlobSum\":"
		out.RawString(prefix[1:])
		out.String(string(in.BlobSum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV1Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV1Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV1Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV1Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes5(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes6(in *jlexer.Lexer, out *ManifestV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SchemaVersion":
			out.SchemaVersion = int(in.Int())
		case "FSLayers":
			if in.IsNull() {
				in.Skip()
				out.FSLayers = nil
			} else {
				in.Delim('[')
				if out.FSLayers == nil {
					if !in.IsDelim(']') {
						out.FSLayers = make([]ManifestV1Config, 0, 4)
					} else {
						out.FSLayers = []ManifestV1Config{}
					}
				} else {
					out.FSLayers = (out.FSLayers)[:0]
				}
				for !in.IsDelim(']') {
					var v6 ManifestV1Config
					(v6).UnmarshalEasyJSON(in)
					out.FSLayers = append(out.FSLayers, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes6(out *jwriter.Writer, in ManifestV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SchemaVersion\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SchemaVersion))
	}
	{
		const prefix string = ",\"FSLayers\":"
		out.RawString(prefix)
		if in.FSLayers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.FSLayers {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes6(l, v)
}
func easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes7(in *jlexer.Lexer, out *Manifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ContentType":
			out.ContentType = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes7(out *jwriter.Writer, in Manifest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Manifest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Manifest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComElasticIoHavenInternalTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Manifest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Manifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComElasticIoHavenInternalTypes7(l, v)
}
