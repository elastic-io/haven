// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes(in *jlexer.Lexer, out *TypeMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "APIVersion":
			out.APIVersion = string(in.String())
		case "Kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes(out *jwriter.Writer, in TypeMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"APIVersion\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"Kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TypeMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TypeMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TypeMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TypeMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes(l, v)
}
func easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes1(in *jlexer.Lexer, out *OwnerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "APIVersion":
			out.APIVersion = string(in.String())
		case "Kind":
			out.Kind = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "UID":
			out.UID = UID(in.String())
		case "BlockOwnerDeletion":
			if in.IsNull() {
				in.Skip()
				out.BlockOwnerDeletion = nil
			} else {
				if out.BlockOwnerDeletion == nil {
					out.BlockOwnerDeletion = new(bool)
				}
				*out.BlockOwnerDeletion = bool(in.Bool())
			}
		case "Controller":
			if in.IsNull() {
				in.Skip()
				out.Controller = nil
			} else {
				if out.Controller == nil {
					out.Controller = new(bool)
				}
				*out.Controller = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes1(out *jwriter.Writer, in OwnerReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"APIVersion\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"Kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"UID\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"BlockOwnerDeletion\":"
		out.RawString(prefix)
		if in.BlockOwnerDeletion == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.BlockOwnerDeletion))
		}
	}
	{
		const prefix string = ",\"Controller\":"
		out.RawString(prefix)
		if in.Controller == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Controller))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OwnerReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OwnerReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OwnerReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OwnerReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes1(l, v)
}
func easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes2(in *jlexer.Lexer, out *ObjectMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Namespace":
			out.Namespace = string(in.String())
		case "UID":
			out.UID = UID(in.String())
		case "ResourceVersion":
			out.ResourceVersion = string(in.String())
		case "CreationTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTimestamp).UnmarshalJSON(data))
			}
		case "DeletionTimestamp":
			if in.IsNull() {
				in.Skip()
				out.DeletionTimestamp = nil
			} else {
				if out.DeletionTimestamp == nil {
					out.DeletionTimestamp = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletionTimestamp).UnmarshalJSON(data))
				}
			}
		case "Finalizers":
			if in.IsNull() {
				in.Skip()
				out.Finalizers = nil
			} else {
				in.Delim('[')
				if out.Finalizers == nil {
					if !in.IsDelim(']') {
						out.Finalizers = make([]string, 0, 4)
					} else {
						out.Finalizers = []string{}
					}
				} else {
					out.Finalizers = (out.Finalizers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Finalizers = append(out.Finalizers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Labels = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Labels)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Annotations)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "OwnerReferences":
			if in.IsNull() {
				in.Skip()
				out.OwnerReferences = nil
			} else {
				in.Delim('[')
				if out.OwnerReferences == nil {
					if !in.IsDelim(']') {
						out.OwnerReferences = make([]OwnerReference, 0, 0)
					} else {
						out.OwnerReferences = []OwnerReference{}
					}
				} else {
					out.OwnerReferences = (out.OwnerReferences)[:0]
				}
				for !in.IsDelim(']') {
					var v4 OwnerReference
					(v4).UnmarshalEasyJSON(in)
					out.OwnerReferences = append(out.OwnerReferences, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GenerateName":
			out.GenerateName = string(in.String())
		case "DeletionGracePeriodSeconds":
			if in.IsNull() {
				in.Skip()
				out.DeletionGracePeriodSeconds = nil
			} else {
				if out.DeletionGracePeriodSeconds == nil {
					out.DeletionGracePeriodSeconds = new(int64)
				}
				*out.DeletionGracePeriodSeconds = int64(in.Int64())
			}
		case "Generation":
			out.Generation = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes2(out *jwriter.Writer, in ObjectMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"UID\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"ResourceVersion\":"
		out.RawString(prefix)
		out.String(string(in.ResourceVersion))
	}
	{
		const prefix string = ",\"CreationTimestamp\":"
		out.RawString(prefix)
		out.Raw((in.CreationTimestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletionTimestamp\":"
		out.RawString(prefix)
		if in.DeletionTimestamp == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletionTimestamp).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Finalizers\":"
		out.RawString(prefix)
		if in.Finalizers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Finalizers {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Labels {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.String(string(v7Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Annotations {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"OwnerReferences\":"
		out.RawString(prefix)
		if in.OwnerReferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.OwnerReferences {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GenerateName\":"
		out.RawString(prefix)
		out.String(string(in.GenerateName))
	}
	{
		const prefix string = ",\"DeletionGracePeriodSeconds\":"
		out.RawString(prefix)
		if in.DeletionGracePeriodSeconds == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.DeletionGracePeriodSeconds))
		}
	}
	{
		const prefix string = ",\"Generation\":"
		out.RawString(prefix)
		out.Int64(int64(in.Generation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes2(l, v)
}
func easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes3(in *jlexer.Lexer, out *ArtifactStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes3(out *jwriter.Writer, in ArtifactStatus) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtifactStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtifactStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtifactStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtifactStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes3(l, v)
}
func easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes4(in *jlexer.Lexer, out *ArtifactSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes4(out *jwriter.Writer, in ArtifactSpec) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtifactSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtifactSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtifactSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtifactSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes4(l, v)
}
func easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes5(in *jlexer.Lexer, out *Artifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Spec":
			(out.Spec).UnmarshalEasyJSON(in)
		case "Status":
			(out.Status).UnmarshalEasyJSON(in)
		case "Name":
			out.Name = string(in.String())
		case "Namespace":
			out.Namespace = string(in.String())
		case "UID":
			out.UID = UID(in.String())
		case "ResourceVersion":
			out.ResourceVersion = string(in.String())
		case "CreationTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTimestamp).UnmarshalJSON(data))
			}
		case "DeletionTimestamp":
			if in.IsNull() {
				in.Skip()
				out.DeletionTimestamp = nil
			} else {
				if out.DeletionTimestamp == nil {
					out.DeletionTimestamp = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletionTimestamp).UnmarshalJSON(data))
				}
			}
		case "Finalizers":
			if in.IsNull() {
				in.Skip()
				out.Finalizers = nil
			} else {
				in.Delim('[')
				if out.Finalizers == nil {
					if !in.IsDelim(']') {
						out.Finalizers = make([]string, 0, 4)
					} else {
						out.Finalizers = []string{}
					}
				} else {
					out.Finalizers = (out.Finalizers)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Finalizers = append(out.Finalizers, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Labels = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 string
					v12 = string(in.String())
					(out.Labels)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Annotations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 string
					v13 = string(in.String())
					(out.Annotations)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "OwnerReferences":
			if in.IsNull() {
				in.Skip()
				out.OwnerReferences = nil
			} else {
				in.Delim('[')
				if out.OwnerReferences == nil {
					if !in.IsDelim(']') {
						out.OwnerReferences = make([]OwnerReference, 0, 0)
					} else {
						out.OwnerReferences = []OwnerReference{}
					}
				} else {
					out.OwnerReferences = (out.OwnerReferences)[:0]
				}
				for !in.IsDelim(']') {
					var v14 OwnerReference
					(v14).UnmarshalEasyJSON(in)
					out.OwnerReferences = append(out.OwnerReferences, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GenerateName":
			out.GenerateName = string(in.String())
		case "DeletionGracePeriodSeconds":
			if in.IsNull() {
				in.Skip()
				out.DeletionGracePeriodSeconds = nil
			} else {
				if out.DeletionGracePeriodSeconds == nil {
					out.DeletionGracePeriodSeconds = new(int64)
				}
				*out.DeletionGracePeriodSeconds = int64(in.Int64())
			}
		case "Generation":
			out.Generation = int64(in.Int64())
		case "APIVersion":
			out.APIVersion = string(in.String())
		case "Kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes5(out *jwriter.Writer, in Artifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Spec\":"
		out.RawString(prefix[1:])
		(in.Spec).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"UID\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"ResourceVersion\":"
		out.RawString(prefix)
		out.String(string(in.ResourceVersion))
	}
	{
		const prefix string = ",\"CreationTimestamp\":"
		out.RawString(prefix)
		out.Raw((in.CreationTimestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletionTimestamp\":"
		out.RawString(prefix)
		if in.DeletionTimestamp == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletionTimestamp).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Finalizers\":"
		out.RawString(prefix)
		if in.Finalizers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Finalizers {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Labels {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Annotations {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"OwnerReferences\":"
		out.RawString(prefix)
		if in.OwnerReferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.OwnerReferences {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GenerateName\":"
		out.RawString(prefix)
		out.String(string(in.GenerateName))
	}
	{
		const prefix string = ",\"DeletionGracePeriodSeconds\":"
		out.RawString(prefix)
		if in.DeletionGracePeriodSeconds == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.DeletionGracePeriodSeconds))
		}
	}
	{
		const prefix string = ",\"Generation\":"
		out.RawString(prefix)
		out.Int64(int64(in.Generation))
	}
	{
		const prefix string = ",\"APIVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"Kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Artifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Artifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ca8a529EncodeGithubComElasticIoHavenInternalTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Artifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Artifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ca8a529DecodeGithubComElasticIoHavenInternalTypes5(l, v)
}
